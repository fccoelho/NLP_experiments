# AUTOGENERATED! DO NOT EDIT! File to edit: clustering.ipynb (unless otherwise specified).

__all__ = ['StreamCorpus', 'dump_to_corpus_file']

# Cell
from sqlalchemy import create_engine
from gensim.models import Word2Vec, KeyedVectors, FastText, Doc2Vec
from gensim.models.doc2vec import TaggedLineDocument
from gensim.similarities.annoy import AnnoyIndexer
from gensim.utils import save_as_line_sentence
from gensim.models.word2vec import LineSentence
from gensim import utils

# Cell
class StreamCorpus(object):
    def __init__(self,db, table, limit=100):
        """
        Iterator over a corpus on a postgresql database
        :param table:
        :param limit:
        """
        self.db = db
        self.engine = create_engine(f'postgresql://postgres:eueueu@localhost/{db}',
                                    echo=False)
        self.limit = limit
        self.table = table
        self.conn = self.engine.connect()

    @property
    def text_gen(self):
        return (str(text[0]) for text in self.conn.execute(f"SELECT abstract FROM {self.table} limit {self.limit}").fetchall() if text[0].strip() != '')

    def __iter__(self):
        for doc in self.text_gen:
            yield utils.simple_preprocess(doc)
        self.conn.close()

def dump_to_corpus_file(stream_corpus):
    save_as_line_sentence(stream_corpus, f'{stream_corpus.db}_{stream_corpus.table}.txt')

# Cell
import pandas as pd
import seaborn as sns
import numpy as np