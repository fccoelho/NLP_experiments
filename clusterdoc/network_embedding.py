# AUTOGENERATED! DO NOT EDIT! File to edit: network_embeding.ipynb (unless otherwise specified).

__all__ = ['SemanticNetwork', 'defaults', 'plot_network', 'get_clusters']

# Cell
import networkx as nx
from networkx.algorithms.community.label_propagation import asyn_lpa_communities
from networkx.algorithms.community import greedy_modularity_communities, girvan_newman, asyn_lpa_communities
import numpy as np
from scipy.cluster.hierarchy import linkage, dendrogram, fcluster
from scipy.spatial.distance import pdist, squareform
import fastcluster as fc
from collections import defaultdict, Counter
import pylab as plt

# Cell
class SemanticNetwork:
    def __init__(self,nneigh, min_sim, model):
        self.nneigh = nneigh
        self.min_sim = min_sim
        self.model = model
        self.net = nx.DiGraph()

    def _get_corpus_gen(self, corpus_file):
        corpus = (d for d in open(corpus_file,'r').readlines())
        return corpus

    def get_vectors(self):
        """
        Returns document vecctores for all documents used in the training
        """
        return self.model.dv.vectors

    def infer_vectors(self, corpus_file):
        """
        Return inferred vectors from corpus file
        """
        corpus = self._get_corpus_gen(corpus_file)
        vectors = np.zeros((self.model.corpus_count,self.model.dv.vector_size)) #vectors as lines
        for i,doc in enumerate(corpus):
            vectors[i,:] = self.model.infer_vector(doc.split())

        return vectors

    def get_agglomerative_cluster(self, vectors):
        clust = fc.linkage_vector(vectors, method="single", metric='cosine')
        return clust

    def grow_network(self, vectors, minsim=0.7):
        dists = pdist(vectors, metric='euclidean')
        sims = squareform(1/(1+dists))
        del dists
        sims[sims<minsim] = 0
        print(sims.shape)
        self.net = nx.convert_matrix.from_numpy_matrix(sims, create_using=nx.MultiDiGraph)

    def get_communities(self, algorithm='LPA'):
        if algorithm == 'LPA':
            comms = asyn_lpa_communities(self.net)
        elif algorithm == 'mod':
            comms = greedy_modularity_communities(self.net)
        return comms







# Cell
import holoviews as hv
from holoviews.operation.datashader import datashade, bundle_graph
import networkx as nx
hv.extension('bokeh')
defaults = dict(width=800, height=800)
hv.opts.defaults(
    hv.opts.EdgePaths(**defaults), hv.opts.Graph(**defaults), hv.opts.Nodes(**defaults))



# Cell
def plot_network(G):
    colors = ['#000000']+hv.Cycle('Category20').values
    graph = hv.Graph.from_networkx(G, nx.layout.fruchterman_reingold_layout,
                                   weight='weight').opts(tools=['hover'],
                                                         cmap=colors,
                                                         node_size=30,
                                                         bgcolor='gray',
                                                         node_line_color='gray'
                                                        )
    labels = hv.Labels(graph.nodes, ['x', 'y'], 'index')
    bg = bundle_graph(graph)
    return bg*labels.opts(text_font_size='8pt', text_color='white')

# Cell

def get_clusters(linkage, dists, threshold=0.9):
    """
    Returns cluster id for every document in the corpus
    """
    clusters = fcluster(doc_linkage, threshold*dists.max(), 'distance')
    return clusters

